name: .NET CI/CD

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "*" ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

  unit-tests:
    name: Unit Tests
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Run Domain Unit Tests
      run: dotnet test tests/ForaFinancial.Domain.UnitTests/ --no-build --configuration Release --collect:"XPlat Code Coverage" --results-directory coverage/domain --logger "trx;LogFileName=domain-tests.trx"

    - name: Run Application Unit Tests
      run: dotnet test tests/ForaFinancial.Application.UnitTests/ --no-build --configuration Release --collect:"XPlat Code Coverage" --results-directory coverage/application --logger "trx;LogFileName=application-tests.trx"

    - name: Merge Coverage Reports
      run: |
        dotnet tool install -g dotnet-coverage
        dotnet-coverage merge coverage/**/coverage.cobertura.xml -f cobertura -o coverage/unit-coverage.cobertura.xml

    - name: Unit Test Coverage Report
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: 'coverage/unit-coverage.cobertura.xml'
        badge: true
        format: 'markdown'
        output: 'both'

    - name: Upload Unit Test Coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: coverage/unit-coverage.cobertura.xml
        flags: unit-tests
        name: unit-tests
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

    - name: Write Unit Test Summary
      run: |
        echo "## Unit Test Coverage" >> $GITHUB_STEP_SUMMARY
        cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY

    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results
        path: |
          coverage/domain/*.trx
          coverage/application/*.trx
          coverage/unit-coverage.cobertura.xml

  integration-tests:
    name: Integration Tests
    needs: [unit-tests]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Run Integration Tests
      run: dotnet test tests/ForaFinancial.IntegrationTests/ --no-build --configuration Release --collect:"XPlat Code Coverage" --results-directory coverage/integration --logger "trx;LogFileName=integration-tests.trx"

    - name: Integration Test Coverage Report
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: 'coverage/integration/**/coverage.cobertura.xml'
        badge: true
        format: 'markdown'
        output: 'both'

    - name: Upload Integration Test Coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: coverage/integration/**/coverage.cobertura.xml
        flags: integration-tests
        name: integration-tests
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

    - name: Write Integration Test Summary
      run: |
        echo "## Integration Test Coverage" >> $GITHUB_STEP_SUMMARY
        cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY

    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: |
          coverage/integration/*.trx
          coverage/integration/**/coverage.cobertura.xml

    - name: Add Coverage PR Comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        recreate: true
        header: coverage-report
        message: |
          ## ðŸ“Š Test Coverage Report
          
          ### Unit Tests
          Please see the unit test coverage in the [job summary](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}).
          
          ### Integration Tests
          Please see the integration test coverage in the [job summary](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}).
          
          ðŸ”— [View detailed coverage on Codecov](https://codecov.io/gh/${{ github.repository }})

  test-report:
    name: Test Report
    needs: [unit-tests, integration-tests]
    runs-on: ubuntu-latest
    if: always()
    permissions:
      contents: read
      checks: write
      pull-requests: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download Unit Test Results
      uses: actions/download-artifact@v4
      with:
        name: unit-test-results
        path: test-results/unit

    - name: Download Integration Test Results
      uses: actions/download-artifact@v4
      with:
        name: integration-test-results
        path: test-results/integration

    - name: Publish Test Results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Test Results
        path: 'test-results/**/*.trx'
        reporter: dotnet-trx
        fail-on-error: false
